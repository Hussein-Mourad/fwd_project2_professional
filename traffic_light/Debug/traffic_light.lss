
traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  00000d30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001add  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb6  00000000  00000000  00002a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d4e  00000000  00000000  000035bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00004310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007eb  00000000  00000000  00004658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc6  00000000  00000000  00004e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00005c09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b8 01 	call	0x370	; 0x370 <main>
  74:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
#include "app.h"


void APP_init()
{
	EXINIT_init(EXINT_INT0, RISING_EDGE);          
  7c:	63 e0       	ldi	r22, 0x03	; 3
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 bf 01 	call	0x37e	; 0x37e <EXINIT_init>
	BUTTON_init(&pedastrian_button, PEDASTRIAN_BUTTON_PORT, PEDASTRIAN_BUTTON_PIN );
  84:	42 e0       	ldi	r20, 0x02	; 2
  86:	63 e0       	ldi	r22, 0x03	; 3
  88:	88 e6       	ldi	r24, 0x68	; 104
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 92 01 	call	0x324	; 0x324 <BUTTON_init>
	
	LED_init(&pedastrian_grnLED, PEDASTRIAN_GREEN_PORT, PEDASTRIAN_GREEN_PIN);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	86 e6       	ldi	r24, 0x66	; 102
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>
	LED_init(&pedastrian_ylwLED, PEDASTRIAN_YELLOW_PORT, PEDASTRIAN_YELLOW_PIN);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	80 e6       	ldi	r24, 0x60	; 96
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>
	LED_init(&pedastrian_redLED, PEDASTRIAN_RED_PORT, PEDASTRIAN_RED_PIN);
  a8:	42 e0       	ldi	r20, 0x02	; 2
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	8a e6       	ldi	r24, 0x6A	; 106
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>
	LED_init(&normal_grnLED    , NORMAL_GREEN_PORT, NORMAL_GREEN_PIN);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	84 e6       	ldi	r24, 0x64	; 100
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>
	LED_init(&normal_ylwLED    , NORMAL_YELLOW_PORT, NORMAL_YELLOW_PIN);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	82 e6       	ldi	r24, 0x62	; 98
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>
	LED_init(&normal_redLED    , NORMAL_RED_PORT, NORMAL_RED_PIN);
  cc:	42 e0       	ldi	r20, 0x02	; 2
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	8c e6       	ldi	r24, 0x6C	; 108
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 9b 01 	call	0x336	; 0x336 <LED_init>
  d8:	08 95       	ret

000000da <blink_yellow>:
	pedastrain_mode();
}


void blink_yellow(TRAFFIC_TYPE traffic_type)
{
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	c8 2f       	mov	r28, r24
	// Blink for 5 sec
	for(int i=0; i<5; i++)
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	46 c0       	rjmp	.+140    	; 0x174 <blink_yellow+0x9a>
	{
		switch(traffic_type)
  e8:	c1 30       	cpi	r28, 0x01	; 1
  ea:	49 f0       	breq	.+18     	; 0xfe <blink_yellow+0x24>
  ec:	18 f0       	brcs	.+6      	; 0xf4 <blink_yellow+0x1a>
  ee:	c2 30       	cpi	r28, 0x02	; 2
  f0:	59 f0       	breq	.+22     	; 0x108 <blink_yellow+0x2e>
  f2:	12 c0       	rjmp	.+36     	; 0x118 <blink_yellow+0x3e>
		{
			case PEDASTRIAN_LIGHT:
				LED_on(&pedastrian_ylwLED);
  f4:	80 e6       	ldi	r24, 0x60	; 96
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
				break;
  fc:	0d c0       	rjmp	.+26     	; 0x118 <blink_yellow+0x3e>
			case NORMAL_LIGHT:
				LED_on(&normal_ylwLED);
  fe:	82 e6       	ldi	r24, 0x62	; 98
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
				break;
 106:	08 c0       	rjmp	.+16     	; 0x118 <blink_yellow+0x3e>
			case BOTH_LIGHT:
				LED_on(&pedastrian_ylwLED);
 108:	80 e6       	ldi	r24, 0x60	; 96
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
				LED_on(&normal_ylwLED);
 110:	82 e6       	ldi	r24, 0x62	; 98
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
			default:
				break;
		}

		TIM0_delay_ms(500);
 118:	24 ef       	ldi	r18, 0xF4	; 244
 11a:	31 e0       	ldi	r19, 0x01	; 1
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 4e 03 	call	0x69c	; 0x69c <TIM0_delay_ms>
	
		switch(traffic_type)
 12c:	c1 30       	cpi	r28, 0x01	; 1
 12e:	49 f0       	breq	.+18     	; 0x142 <blink_yellow+0x68>
 130:	18 f0       	brcs	.+6      	; 0x138 <blink_yellow+0x5e>
 132:	c2 30       	cpi	r28, 0x02	; 2
 134:	59 f0       	breq	.+22     	; 0x14c <blink_yellow+0x72>
 136:	12 c0       	rjmp	.+36     	; 0x15c <blink_yellow+0x82>
		{
			case PEDASTRIAN_LIGHT:
				LED_off(&pedastrian_ylwLED);
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
				break;
 140:	0d c0       	rjmp	.+26     	; 0x15c <blink_yellow+0x82>
			case NORMAL_LIGHT:
				LED_off(&normal_ylwLED);
 142:	82 e6       	ldi	r24, 0x62	; 98
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
				break;
 14a:	08 c0       	rjmp	.+16     	; 0x15c <blink_yellow+0x82>
			case BOTH_LIGHT:
				LED_off(&pedastrian_ylwLED);
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
				LED_off(&normal_ylwLED);
 154:	82 e6       	ldi	r24, 0x62	; 98
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
			default:
				break;
		}

		TIM0_delay_ms(500);
 15c:	24 ef       	ldi	r18, 0xF4	; 244
 15e:	31 e0       	ldi	r19, 0x01	; 1
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 4e 03 	call	0x69c	; 0x69c <TIM0_delay_ms>


void blink_yellow(TRAFFIC_TYPE traffic_type)
{
	// Blink for 5 sec
	for(int i=0; i<5; i++)
 170:	0f 5f       	subi	r16, 0xFF	; 255
 172:	1f 4f       	sbci	r17, 0xFF	; 255
 174:	05 30       	cpi	r16, 0x05	; 5
 176:	11 05       	cpc	r17, r1
 178:	0c f4       	brge	.+2      	; 0x17c <blink_yellow+0xa2>
 17a:	b6 cf       	rjmp	.-148    	; 0xe8 <blink_yellow+0xe>
				break;
		}

		TIM0_delay_ms(500);
	}
}
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <normal_mode>:


void normal_mode()
{
	LED_on(&normal_grnLED);
 184:	84 e6       	ldi	r24, 0x64	; 100
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
	TIM0_delay_ms(5000);
 18c:	28 e8       	ldi	r18, 0x88	; 136
 18e:	33 e1       	ldi	r19, 0x13	; 19
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 4e 03 	call	0x69c	; 0x69c <TIM0_delay_ms>
	LED_off(&normal_grnLED);
 1a0:	84 e6       	ldi	r24, 0x64	; 100
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
	
	blink_yellow(NORMAL_LIGHT);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 6d 00 	call	0xda	; 0xda <blink_yellow>
	LED_off(&normal_ylwLED);
 1ae:	82 e6       	ldi	r24, 0x62	; 98
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
		
	LED_on(&normal_redLED);
 1b6:	8c e6       	ldi	r24, 0x6C	; 108
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
	TIM0_delay_ms(5000);
 1be:	28 e8       	ldi	r18, 0x88	; 136
 1c0:	33 e1       	ldi	r19, 0x13	; 19
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 4e 03 	call	0x69c	; 0x69c <TIM0_delay_ms>
	LED_off(&normal_redLED);	
 1d2:	8c e6       	ldi	r24, 0x6C	; 108
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
 1da:	08 95       	ret

000001dc <APP_start>:

void APP_start()
{
	while (1)
	{
		normal_mode();
 1dc:	0e 94 c2 00 	call	0x184	; 0x184 <normal_mode>
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <APP_start>

000001e2 <pedastrain_mode>:
	LED_off(&normal_redLED);	
}

void pedastrain_mode()
{
	if (LED_read(&normal_redLED))
 1e2:	8c e6       	ldi	r24, 0x6C	; 108
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 b2 01 	call	0x364	; 0x364 <LED_read>
 1ea:	88 23       	and	r24, r24
 1ec:	b9 f0       	breq	.+46     	; 0x21c <pedastrain_mode+0x3a>
	{
		LED_on(&pedastrian_grnLED);
 1ee:	86 e6       	ldi	r24, 0x66	; 102
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
		LED_on(&normal_redLED);
 1f6:	8c e6       	ldi	r24, 0x6C	; 108
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
		
		TIM0_delay_ms(5000);
 1fe:	28 e8       	ldi	r18, 0x88	; 136
 200:	33 e1       	ldi	r19, 0x13	; 19
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 4e 03 	call	0x69c	; 0x69c <TIM0_delay_ms>

		LED_off(&pedastrian_grnLED);
 212:	86 e6       	ldi	r24, 0x66	; 102
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
 21a:	08 95       	ret

		
	}
	else if (LED_read(&normal_grnLED))
 21c:	84 e6       	ldi	r24, 0x64	; 100
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 b2 01 	call	0x364	; 0x364 <LED_read>
 224:	88 23       	and	r24, r24
 226:	e1 f1       	breq	.+120    	; 0x2a0 <pedastrain_mode+0xbe>
	{
		LED_on(&pedastrian_redLED);
 228:	8a e6       	ldi	r24, 0x6A	; 106
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
		LED_on(&normal_grnLED);
 230:	84 e6       	ldi	r24, 0x64	; 100
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
		
		TIM0_delay_ms(5000);
 238:	28 e8       	ldi	r18, 0x88	; 136
 23a:	33 e1       	ldi	r19, 0x13	; 19
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 4e 03 	call	0x69c	; 0x69c <TIM0_delay_ms>

		LED_off(&pedastrian_redLED);
 24c:	8a e6       	ldi	r24, 0x6A	; 106
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
		LED_off(&normal_grnLED);
 254:	84 e6       	ldi	r24, 0x64	; 100
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
		
		 blink_yellow(BOTH_LIGHT);
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 6d 00 	call	0xda	; 0xda <blink_yellow>
		
		LED_on(&normal_redLED);
 262:	8c e6       	ldi	r24, 0x6C	; 108
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
		LED_on(&pedastrian_grnLED);
 26a:	86 e6       	ldi	r24, 0x66	; 102
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
		
		TIM0_delay_ms(5000);
 272:	28 e8       	ldi	r18, 0x88	; 136
 274:	33 e1       	ldi	r19, 0x13	; 19
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 4e 03 	call	0x69c	; 0x69c <TIM0_delay_ms>
		
		LED_off(&pedastrian_grnLED);
 286:	86 e6       	ldi	r24, 0x66	; 102
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
		LED_off(&normal_redLED);
 28e:	8c e6       	ldi	r24, 0x6C	; 108
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
		LED_on(&normal_grnLED);
 296:	84 e6       	ldi	r24, 0x64	; 100
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
 29e:	08 95       	ret
	
	}
	else
	{
		blink_yellow(BOTH_LIGHT);
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	0e 94 6d 00 	call	0xda	; 0xda <blink_yellow>
		
		LED_on(&normal_redLED);
 2a6:	8c e6       	ldi	r24, 0x6C	; 108
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
		LED_on(&pedastrian_grnLED);
 2ae:	86 e6       	ldi	r24, 0x66	; 102
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 a4 01 	call	0x348	; 0x348 <LED_on>
		
		TIM0_delay_ms(5000);
 2b6:	28 e8       	ldi	r18, 0x88	; 136
 2b8:	33 e1       	ldi	r19, 0x13	; 19
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 4e 03 	call	0x69c	; 0x69c <TIM0_delay_ms>
		
		LED_off(&pedastrian_grnLED);
 2ca:	86 e6       	ldi	r24, 0x66	; 102
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
		LED_off(&normal_redLED);
 2d2:	8c e6       	ldi	r24, 0x6C	; 108
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 ab 01 	call	0x356	; 0x356 <LED_off>
 2da:	08 95       	ret

000002dc <__vector_1>:
		normal_mode();
	}
}

ISR(INT0_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
	pedastrain_mode();
 2fe:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <pedastrain_mode>
}
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	7f 91       	pop	r23
 310:	6f 91       	pop	r22
 312:	5f 91       	pop	r21
 314:	4f 91       	pop	r20
 316:	3f 91       	pop	r19
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <BUTTON_init>:
#include "../../MCAL/GPIO/GPIO.h"
#include "Button.h"


void BUTTON_init(ST_Button* Ptr_stButton, EN_Port port, EN_Pin pin)
{
 324:	fc 01       	movw	r30, r24
 326:	86 2f       	mov	r24, r22
 328:	64 2f       	mov	r22, r20
	Ptr_stButton->Port = port;
 32a:	80 83       	st	Z, r24
	Ptr_stButton->Pin  = pin;
 32c:	41 83       	std	Z+1, r20	; 0x01
	GPIO_setPinMode(Ptr_stButton->Port, Ptr_stButton->Pin, INPUT);
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	0e 94 01 02 	call	0x402	; 0x402 <GPIO_setPinMode>
 334:	08 95       	ret

00000336 <LED_init>:
}


void LED_toggle( ST_Led* Ptr_stLed )
{
	GPIO_pinToggle(Ptr_stLed->Port, Ptr_stLed->Pin);
 336:	fc 01       	movw	r30, r24
 338:	86 2f       	mov	r24, r22
 33a:	64 2f       	mov	r22, r20
 33c:	80 83       	st	Z, r24
 33e:	41 83       	std	Z+1, r20	; 0x01
 340:	42 e0       	ldi	r20, 0x02	; 2
 342:	0e 94 01 02 	call	0x402	; 0x402 <GPIO_setPinMode>
 346:	08 95       	ret

00000348 <LED_on>:
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	fc 01       	movw	r30, r24
 34c:	61 81       	ldd	r22, Z+1	; 0x01
 34e:	80 81       	ld	r24, Z
 350:	0e 94 b3 02 	call	0x566	; 0x566 <GPIO_setPinValue>
 354:	08 95       	ret

00000356 <LED_off>:
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	61 81       	ldd	r22, Z+1	; 0x01
 35c:	80 81       	ld	r24, Z
 35e:	0e 94 b3 02 	call	0x566	; 0x566 <GPIO_setPinValue>
 362:	08 95       	ret

00000364 <LED_read>:
}


uint8_t LED_read( ST_Led* Ptr_stLed )
{
	return GPIO_getPinValue(Ptr_stLed->Port, Ptr_stLed->Pin);
 364:	fc 01       	movw	r30, r24
 366:	61 81       	ldd	r22, Z+1	; 0x01
 368:	80 81       	ld	r24, Z
 36a:	0e 94 20 03 	call	0x640	; 0x640 <GPIO_getPinValue>
 36e:	08 95       	ret

00000370 <main>:
 */ 

#include "APP/app.h"
int main(void)
{
	APP_init();
 370:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start();
 374:	0e 94 ee 00 	call	0x1dc	; 0x1dc <APP_start>
}
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	08 95       	ret

0000037e <EXINIT_init>:
#include "../../Utilities/register.h"
#include "EXINT.h"

void EXINIT_init(EXINT_Interrupt extInt, EXINIT_Type intType)
{
	SET_BIT(SREG, I);          // Enable Global Interrupt
 37e:	9f b7       	in	r25, 0x3f	; 63
 380:	90 68       	ori	r25, 0x80	; 128
 382:	9f bf       	out	0x3f, r25	; 63

	switch(extInt)
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	d1 f0       	breq	.+52     	; 0x3bc <EXINIT_init+0x3e>
 388:	18 f0       	brcs	.+6      	; 0x390 <EXINIT_init+0x12>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	69 f1       	breq	.+90     	; 0x3e8 <EXINIT_init+0x6a>
 38e:	08 95       	ret
	{
		case EXINT_INT0:
		if (READ_BIT(intType, ISC0))
 390:	60 ff       	sbrs	r22, 0
 392:	04 c0       	rjmp	.+8      	; 0x39c <EXINIT_init+0x1e>
		SET_BIT(MCUCR, ISC00);
 394:	85 b7       	in	r24, 0x35	; 53
 396:	81 60       	ori	r24, 0x01	; 1
 398:	85 bf       	out	0x35, r24	; 53
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <EXINIT_init+0x24>
		else
		CLR_BIT(MCUCR, ISC00);
 39c:	85 b7       	in	r24, 0x35	; 53
 39e:	8e 7f       	andi	r24, 0xFE	; 254
 3a0:	85 bf       	out	0x35, r24	; 53

		if (READ_BIT(intType, ISC1))
 3a2:	61 ff       	sbrs	r22, 1
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <EXINIT_init+0x30>
		SET_BIT(MCUCR, ISC01);
 3a6:	85 b7       	in	r24, 0x35	; 53
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	85 bf       	out	0x35, r24	; 53
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <EXINIT_init+0x36>
		else
		CLR_BIT(MCUCR, ISC01);
 3ae:	85 b7       	in	r24, 0x35	; 53
 3b0:	8d 7f       	andi	r24, 0xFD	; 253
 3b2:	85 bf       	out	0x35, r24	; 53
		SET_BIT(GICR, INT0);
 3b4:	8b b7       	in	r24, 0x3b	; 59
 3b6:	80 64       	ori	r24, 0x40	; 64
 3b8:	8b bf       	out	0x3b, r24	; 59
		break;
 3ba:	08 95       	ret

		case EXINT_INT1:
		if (READ_BIT(intType, ISC0))
 3bc:	60 ff       	sbrs	r22, 0
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <EXINIT_init+0x4a>
		SET_BIT(MCUCR, ISC10);
 3c0:	85 b7       	in	r24, 0x35	; 53
 3c2:	84 60       	ori	r24, 0x04	; 4
 3c4:	85 bf       	out	0x35, r24	; 53
 3c6:	03 c0       	rjmp	.+6      	; 0x3ce <EXINIT_init+0x50>
		else
		CLR_BIT(MCUCR, ISC10);
 3c8:	85 b7       	in	r24, 0x35	; 53
 3ca:	8b 7f       	andi	r24, 0xFB	; 251
 3cc:	85 bf       	out	0x35, r24	; 53

		if (READ_BIT(intType, ISC1))
 3ce:	61 ff       	sbrs	r22, 1
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <EXINIT_init+0x5c>
		SET_BIT(MCUCR, ISC11);
 3d2:	85 b7       	in	r24, 0x35	; 53
 3d4:	88 60       	ori	r24, 0x08	; 8
 3d6:	85 bf       	out	0x35, r24	; 53
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <EXINIT_init+0x62>
		else
		CLR_BIT(MCUCR, ISC11);
 3da:	85 b7       	in	r24, 0x35	; 53
 3dc:	87 7f       	andi	r24, 0xF7	; 247
 3de:	85 bf       	out	0x35, r24	; 53
		SET_BIT(GICR, INT1);
 3e0:	8b b7       	in	r24, 0x3b	; 59
 3e2:	80 68       	ori	r24, 0x80	; 128
 3e4:	8b bf       	out	0x3b, r24	; 59
		break;
 3e6:	08 95       	ret
		
		case EXINT_INT2:
		if (READ_BIT(intType, ISC1))
 3e8:	61 ff       	sbrs	r22, 1
 3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <EXINIT_init+0x76>
		SET_BIT(MCUCSR, ISC2);
 3ec:	84 b7       	in	r24, 0x34	; 52
 3ee:	80 64       	ori	r24, 0x40	; 64
 3f0:	84 bf       	out	0x34, r24	; 52
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <EXINIT_init+0x7c>
		else
		CLR_BIT(MCUCSR, ISC2);
 3f4:	84 b7       	in	r24, 0x34	; 52
 3f6:	8f 7b       	andi	r24, 0xBF	; 191
 3f8:	84 bf       	out	0x34, r24	; 52
		SET_BIT(GICR, INT2);
 3fa:	8b b7       	in	r24, 0x3b	; 59
 3fc:	80 62       	ori	r24, 0x20	; 32
 3fe:	8b bf       	out	0x3b, r24	; 59
 400:	08 95       	ret

00000402 <GPIO_setPinMode>:
		case PORT_C:
		TOGGLE_BIT(PORTC, pin);
		break;
		
		case PORT_D:
		TOGGLE_BIT(PORTD, pin);
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	91 f1       	breq	.+100    	; 0x46a <GPIO_setPinMode+0x68>
 406:	38 f0       	brcs	.+14     	; 0x416 <GPIO_setPinMode+0x14>
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	09 f4       	brne	.+2      	; 0x40e <GPIO_setPinMode+0xc>
 40c:	58 c0       	rjmp	.+176    	; 0x4be <GPIO_setPinMode+0xbc>
 40e:	83 30       	cpi	r24, 0x03	; 3
 410:	09 f4       	brne	.+2      	; 0x414 <GPIO_setPinMode+0x12>
 412:	7f c0       	rjmp	.+254    	; 0x512 <GPIO_setPinMode+0x110>
 414:	08 95       	ret
 416:	41 11       	cpse	r20, r1
 418:	0c c0       	rjmp	.+24     	; 0x432 <GPIO_setPinMode+0x30>
 41a:	2a b3       	in	r18, 0x1a	; 26
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <GPIO_setPinMode+0x24>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	6a 95       	dec	r22
 428:	e2 f7       	brpl	.-8      	; 0x422 <GPIO_setPinMode+0x20>
 42a:	80 95       	com	r24
 42c:	82 23       	and	r24, r18
 42e:	8a bb       	out	0x1a, r24	; 26
 430:	08 95       	ret
 432:	41 30       	cpi	r20, 0x01	; 1
 434:	79 f4       	brne	.+30     	; 0x454 <GPIO_setPinMode+0x52>
 436:	2a b3       	in	r18, 0x1a	; 26
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <GPIO_setPinMode+0x40>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <GPIO_setPinMode+0x3c>
 446:	80 95       	com	r24
 448:	82 23       	and	r24, r18
 44a:	8a bb       	out	0x1a, r24	; 26
 44c:	80 b7       	in	r24, 0x30	; 48
 44e:	84 60       	ori	r24, 0x04	; 4
 450:	80 bf       	out	0x30, r24	; 48
 452:	08 95       	ret
 454:	2a b3       	in	r18, 0x1a	; 26
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <GPIO_setPinMode+0x5e>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <GPIO_setPinMode+0x5a>
 464:	82 2b       	or	r24, r18
 466:	8a bb       	out	0x1a, r24	; 26
 468:	08 95       	ret
 46a:	41 11       	cpse	r20, r1
 46c:	0c c0       	rjmp	.+24     	; 0x486 <GPIO_setPinMode+0x84>
 46e:	27 b3       	in	r18, 0x17	; 23
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <GPIO_setPinMode+0x78>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <GPIO_setPinMode+0x74>
 47e:	80 95       	com	r24
 480:	82 23       	and	r24, r18
 482:	87 bb       	out	0x17, r24	; 23
 484:	08 95       	ret
 486:	41 30       	cpi	r20, 0x01	; 1
 488:	79 f4       	brne	.+30     	; 0x4a8 <GPIO_setPinMode+0xa6>
 48a:	27 b3       	in	r18, 0x17	; 23
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <GPIO_setPinMode+0x94>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <GPIO_setPinMode+0x90>
 49a:	80 95       	com	r24
 49c:	82 23       	and	r24, r18
 49e:	87 bb       	out	0x17, r24	; 23
 4a0:	80 b7       	in	r24, 0x30	; 48
 4a2:	84 60       	ori	r24, 0x04	; 4
 4a4:	80 bf       	out	0x30, r24	; 48
 4a6:	08 95       	ret
 4a8:	27 b3       	in	r18, 0x17	; 23
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <GPIO_setPinMode+0xb2>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <GPIO_setPinMode+0xae>
 4b8:	82 2b       	or	r24, r18
 4ba:	87 bb       	out	0x17, r24	; 23
 4bc:	08 95       	ret
 4be:	41 11       	cpse	r20, r1
 4c0:	0c c0       	rjmp	.+24     	; 0x4da <GPIO_setPinMode+0xd8>
 4c2:	24 b3       	in	r18, 0x14	; 20
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <GPIO_setPinMode+0xcc>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <GPIO_setPinMode+0xc8>
 4d2:	80 95       	com	r24
 4d4:	82 23       	and	r24, r18
 4d6:	84 bb       	out	0x14, r24	; 20
 4d8:	08 95       	ret
 4da:	41 30       	cpi	r20, 0x01	; 1
 4dc:	79 f4       	brne	.+30     	; 0x4fc <GPIO_setPinMode+0xfa>
 4de:	24 b3       	in	r18, 0x14	; 20
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <GPIO_setPinMode+0xe8>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <GPIO_setPinMode+0xe4>
 4ee:	80 95       	com	r24
 4f0:	82 23       	and	r24, r18
 4f2:	84 bb       	out	0x14, r24	; 20
 4f4:	80 b7       	in	r24, 0x30	; 48
 4f6:	84 60       	ori	r24, 0x04	; 4
 4f8:	80 bf       	out	0x30, r24	; 48
 4fa:	08 95       	ret
 4fc:	24 b3       	in	r18, 0x14	; 20
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <GPIO_setPinMode+0x106>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <GPIO_setPinMode+0x102>
 50c:	82 2b       	or	r24, r18
 50e:	84 bb       	out	0x14, r24	; 20
 510:	08 95       	ret
 512:	41 11       	cpse	r20, r1
 514:	0c c0       	rjmp	.+24     	; 0x52e <GPIO_setPinMode+0x12c>
 516:	21 b3       	in	r18, 0x11	; 17
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <GPIO_setPinMode+0x120>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <GPIO_setPinMode+0x11c>
 526:	80 95       	com	r24
 528:	82 23       	and	r24, r18
 52a:	81 bb       	out	0x11, r24	; 17
 52c:	08 95       	ret
 52e:	41 30       	cpi	r20, 0x01	; 1
 530:	79 f4       	brne	.+30     	; 0x550 <GPIO_setPinMode+0x14e>
 532:	21 b3       	in	r18, 0x11	; 17
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <GPIO_setPinMode+0x13c>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <GPIO_setPinMode+0x138>
 542:	80 95       	com	r24
 544:	82 23       	and	r24, r18
 546:	81 bb       	out	0x11, r24	; 17
 548:	80 b7       	in	r24, 0x30	; 48
 54a:	84 60       	ori	r24, 0x04	; 4
 54c:	80 bf       	out	0x30, r24	; 48
 54e:	08 95       	ret
 550:	21 b3       	in	r18, 0x11	; 17
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <GPIO_setPinMode+0x15a>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <GPIO_setPinMode+0x156>
 560:	82 2b       	or	r24, r18
 562:	81 bb       	out	0x11, r24	; 17
 564:	08 95       	ret

00000566 <GPIO_setPinValue>:
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	01 f1       	breq	.+64     	; 0x5aa <GPIO_setPinValue+0x44>
 56a:	30 f0       	brcs	.+12     	; 0x578 <GPIO_setPinValue+0x12>
 56c:	82 30       	cpi	r24, 0x02	; 2
 56e:	b1 f1       	breq	.+108    	; 0x5dc <GPIO_setPinValue+0x76>
 570:	83 30       	cpi	r24, 0x03	; 3
 572:	09 f4       	brne	.+2      	; 0x576 <GPIO_setPinValue+0x10>
 574:	4c c0       	rjmp	.+152    	; 0x60e <GPIO_setPinValue+0xa8>
 576:	08 95       	ret
 578:	41 11       	cpse	r20, r1
 57a:	0c c0       	rjmp	.+24     	; 0x594 <GPIO_setPinValue+0x2e>
 57c:	2b b3       	in	r18, 0x1b	; 27
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <GPIO_setPinValue+0x22>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <GPIO_setPinValue+0x1e>
 58c:	80 95       	com	r24
 58e:	82 23       	and	r24, r18
 590:	8b bb       	out	0x1b, r24	; 27
 592:	08 95       	ret
 594:	2b b3       	in	r18, 0x1b	; 27
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <GPIO_setPinValue+0x3a>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	6a 95       	dec	r22
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <GPIO_setPinValue+0x36>
 5a4:	82 2b       	or	r24, r18
 5a6:	8b bb       	out	0x1b, r24	; 27
 5a8:	08 95       	ret
 5aa:	41 11       	cpse	r20, r1
 5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <GPIO_setPinValue+0x60>
 5ae:	28 b3       	in	r18, 0x18	; 24
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <GPIO_setPinValue+0x54>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <GPIO_setPinValue+0x50>
 5be:	80 95       	com	r24
 5c0:	82 23       	and	r24, r18
 5c2:	88 bb       	out	0x18, r24	; 24
 5c4:	08 95       	ret
 5c6:	28 b3       	in	r18, 0x18	; 24
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <GPIO_setPinValue+0x6c>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <GPIO_setPinValue+0x68>
 5d6:	82 2b       	or	r24, r18
 5d8:	88 bb       	out	0x18, r24	; 24
 5da:	08 95       	ret
 5dc:	41 11       	cpse	r20, r1
 5de:	0c c0       	rjmp	.+24     	; 0x5f8 <GPIO_setPinValue+0x92>
 5e0:	25 b3       	in	r18, 0x15	; 21
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <GPIO_setPinValue+0x86>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <GPIO_setPinValue+0x82>
 5f0:	80 95       	com	r24
 5f2:	82 23       	and	r24, r18
 5f4:	85 bb       	out	0x15, r24	; 21
 5f6:	08 95       	ret
 5f8:	25 b3       	in	r18, 0x15	; 21
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <GPIO_setPinValue+0x9e>
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <GPIO_setPinValue+0x9a>
 608:	82 2b       	or	r24, r18
 60a:	85 bb       	out	0x15, r24	; 21
 60c:	08 95       	ret
 60e:	41 11       	cpse	r20, r1
 610:	0c c0       	rjmp	.+24     	; 0x62a <GPIO_setPinValue+0xc4>
 612:	22 b3       	in	r18, 0x12	; 18
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <GPIO_setPinValue+0xb8>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <GPIO_setPinValue+0xb4>
 622:	80 95       	com	r24
 624:	82 23       	and	r24, r18
 626:	82 bb       	out	0x12, r24	; 18
 628:	08 95       	ret
 62a:	22 b3       	in	r18, 0x12	; 18
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <GPIO_setPinValue+0xd0>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	6a 95       	dec	r22
 638:	e2 f7       	brpl	.-8      	; 0x632 <GPIO_setPinValue+0xcc>
 63a:	82 2b       	or	r24, r18
 63c:	82 bb       	out	0x12, r24	; 18
 63e:	08 95       	ret

00000640 <GPIO_getPinValue>:
uint8_t GPIO_getPinValue(EN_Port port, EN_Pin pin)
{
	// 1. Define temp variable to put pin value in it
	// 2. Determine which Port (PORT_A, PORT_B, PORT_C, PORT_D)
	uint8_t value  = 0 ;
	switch(port)
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	79 f0       	breq	.+30     	; 0x662 <GPIO_getPinValue+0x22>
 644:	28 f0       	brcs	.+10     	; 0x650 <GPIO_getPinValue+0x10>
 646:	82 30       	cpi	r24, 0x02	; 2
 648:	a9 f0       	breq	.+42     	; 0x674 <GPIO_getPinValue+0x34>
 64a:	83 30       	cpi	r24, 0x03	; 3
 64c:	e1 f0       	breq	.+56     	; 0x686 <GPIO_getPinValue+0x46>
 64e:	24 c0       	rjmp	.+72     	; 0x698 <GPIO_getPinValue+0x58>
	{
		case PORT_A:
		value = READ_BIT(PINA, pin);
 650:	89 b3       	in	r24, 0x19	; 25
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <GPIO_getPinValue+0x1a>
 656:	95 95       	asr	r25
 658:	87 95       	ror	r24
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <GPIO_getPinValue+0x16>
 65e:	81 70       	andi	r24, 0x01	; 1
		break;
 660:	08 95       	ret
		
		case PORT_B:
		value = READ_BIT(PINB, pin);
 662:	86 b3       	in	r24, 0x16	; 22
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <GPIO_getPinValue+0x2c>
 668:	95 95       	asr	r25
 66a:	87 95       	ror	r24
 66c:	6a 95       	dec	r22
 66e:	e2 f7       	brpl	.-8      	; 0x668 <GPIO_getPinValue+0x28>
 670:	81 70       	andi	r24, 0x01	; 1
		break;
 672:	08 95       	ret
		
		case PORT_C:
		value = READ_BIT(PINC, pin);
 674:	83 b3       	in	r24, 0x13	; 19
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <GPIO_getPinValue+0x3e>
 67a:	95 95       	asr	r25
 67c:	87 95       	ror	r24
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <GPIO_getPinValue+0x3a>
 682:	81 70       	andi	r24, 0x01	; 1
		break;
 684:	08 95       	ret
		
		case PORT_D:
		value = READ_BIT(PIND, pin);
 686:	80 b3       	in	r24, 0x10	; 16
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <GPIO_getPinValue+0x50>
 68c:	95 95       	asr	r25
 68e:	87 95       	ror	r24
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <GPIO_getPinValue+0x4c>
 694:	81 70       	andi	r24, 0x01	; 1
		break;
 696:	08 95       	ret
*/
uint8_t GPIO_getPinValue(EN_Port port, EN_Pin pin)
{
	// 1. Define temp variable to put pin value in it
	// 2. Determine which Port (PORT_A, PORT_B, PORT_C, PORT_D)
	uint8_t value  = 0 ;
 698:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
		break;
	}
	return value;
}
 69a:	08 95       	ret

0000069c <TIM0_delay_ms>:
	return TIM0;
}


void TIM0_delay_ms( uint32_t delay )
{
 69c:	4f 92       	push	r4
 69e:	5f 92       	push	r5
 6a0:	6f 92       	push	r6
 6a2:	7f 92       	push	r7
 6a4:	8f 92       	push	r8
 6a6:	9f 92       	push	r9
 6a8:	af 92       	push	r10
 6aa:	bf 92       	push	r11
 6ac:	cf 92       	push	r12
 6ae:	df 92       	push	r13
 6b0:	ef 92       	push	r14
 6b2:	ff 92       	push	r15
 6b4:	0f 93       	push	r16
 6b6:	1f 93       	push	r17
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	00 d0       	rcall	.+0      	; 0x6be <TIM0_delay_ms+0x22>
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <TIM0_delay_ms+0x24>
 6c0:	00 d0       	rcall	.+0      	; 0x6c2 <TIM0_delay_ms+0x26>
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
	

	//Compute T_tick and N_overflows
	T_tick      = 1.0*TIM0_PRESCALER / F_CPU;
	T_max       = T_tick * 256 * 1000;
	N_overflows = ceil(delay / T_max);
 6c6:	0e 94 67 05 	call	0xace	; 0xace <__floatundisf>
 6ca:	69 83       	std	Y+1, r22	; 0x01
 6cc:	7a 83       	std	Y+2, r23	; 0x02
 6ce:	8b 83       	std	Y+3, r24	; 0x03
 6d0:	9c 83       	std	Y+4, r25	; 0x04
 6d2:	2f e6       	ldi	r18, 0x6F	; 111
 6d4:	32 e1       	ldi	r19, 0x12	; 18
 6d6:	43 e8       	ldi	r20, 0x83	; 131
 6d8:	5e e3       	ldi	r21, 0x3E	; 62
 6da:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
 6de:	0e 94 73 04 	call	0x8e6	; 0x8e6 <ceil>
 6e2:	0e 94 01 05 	call	0xa02	; 0xa02 <__fixunssfdi>
 6e6:	f2 2e       	mov	r15, r18
 6e8:	03 2f       	mov	r16, r19
 6ea:	14 2f       	mov	r17, r20
 6ec:	e5 2e       	mov	r14, r21
 6ee:	d6 2e       	mov	r13, r22
 6f0:	c7 2e       	mov	r12, r23
 6f2:	b8 2e       	mov	r11, r24
 6f4:	a9 2e       	mov	r10, r25
 6f6:	2d 83       	std	Y+5, r18	; 0x05
 6f8:	3e 83       	std	Y+6, r19	; 0x06
 6fa:	94 2e       	mov	r9, r20
 6fc:	85 2e       	mov	r8, r21
 6fe:	76 2e       	mov	r7, r22
 700:	67 2e       	mov	r6, r23
 702:	58 2e       	mov	r5, r24
 704:	49 2e       	mov	r4, r25
	
	//Compute T_init
	if (N_overflows == 1)
 706:	a1 e0       	ldi	r26, 0x01	; 1
 708:	0e 94 50 06 	call	0xca0	; 0xca0 <__cmpdi2_s8>
 70c:	b1 f4       	brne	.+44     	; 0x73a <TIM0_delay_ms+0x9e>
	T_init = ceil(1.0*(T_max - delay)/(T_tick));
 70e:	29 81       	ldd	r18, Y+1	; 0x01
 710:	3a 81       	ldd	r19, Y+2	; 0x02
 712:	4b 81       	ldd	r20, Y+3	; 0x03
 714:	5c 81       	ldd	r21, Y+4	; 0x04
 716:	6f e6       	ldi	r22, 0x6F	; 111
 718:	72 e1       	ldi	r23, 0x12	; 18
 71a:	83 e8       	ldi	r24, 0x83	; 131
 71c:	9e e3       	ldi	r25, 0x3E	; 62
 71e:	0e 94 06 04 	call	0x80c	; 0x80c <__subsf3>
 722:	2d eb       	ldi	r18, 0xBD	; 189
 724:	37 e3       	ldi	r19, 0x37	; 55
 726:	46 e8       	ldi	r20, 0x86	; 134
 728:	55 e3       	ldi	r21, 0x35	; 53
 72a:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
 72e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <ceil>
 732:	0e 94 38 05 	call	0xa70	; 0xa70 <__fixunssfsi>
 736:	a6 2f       	mov	r26, r22
 738:	2d c0       	rjmp	.+90     	; 0x794 <TIM0_delay_ms+0xf8>
	else
	T_init = ceil(T_max - ((1.0*delay/T_tick)/(1.0*N_overflows)));
 73a:	2d eb       	ldi	r18, 0xBD	; 189
 73c:	37 e3       	ldi	r19, 0x37	; 55
 73e:	46 e8       	ldi	r20, 0x86	; 134
 740:	55 e3       	ldi	r21, 0x35	; 53
 742:	69 81       	ldd	r22, Y+1	; 0x01
 744:	7a 81       	ldd	r23, Y+2	; 0x02
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	9c 81       	ldd	r25, Y+4	; 0x04
 74a:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
 74e:	69 83       	std	Y+1, r22	; 0x01
 750:	7a 83       	std	Y+2, r23	; 0x02
 752:	8b 83       	std	Y+3, r24	; 0x03
 754:	9c 83       	std	Y+4, r25	; 0x04
 756:	2f 2d       	mov	r18, r15
 758:	30 2f       	mov	r19, r16
 75a:	41 2f       	mov	r20, r17
 75c:	5e 2d       	mov	r21, r14
 75e:	6d 2d       	mov	r22, r13
 760:	7c 2d       	mov	r23, r12
 762:	8b 2d       	mov	r24, r11
 764:	9a 2d       	mov	r25, r10
 766:	0e 94 67 05 	call	0xace	; 0xace <__floatundisf>
 76a:	9b 01       	movw	r18, r22
 76c:	ac 01       	movw	r20, r24
 76e:	69 81       	ldd	r22, Y+1	; 0x01
 770:	7a 81       	ldd	r23, Y+2	; 0x02
 772:	8b 81       	ldd	r24, Y+3	; 0x03
 774:	9c 81       	ldd	r25, Y+4	; 0x04
 776:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
 77a:	9b 01       	movw	r18, r22
 77c:	ac 01       	movw	r20, r24
 77e:	6f e6       	ldi	r22, 0x6F	; 111
 780:	72 e1       	ldi	r23, 0x12	; 18
 782:	83 e8       	ldi	r24, 0x83	; 131
 784:	9e e3       	ldi	r25, 0x3E	; 62
 786:	0e 94 06 04 	call	0x80c	; 0x80c <__subsf3>
 78a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <ceil>
 78e:	0e 94 38 05 	call	0xa70	; 0xa70 <__fixunssfsi>
 792:	a6 2f       	mov	r26, r22

	//Clear TCCR0
	TCCR0  = 0x00;
 794:	13 be       	out	0x33, r1	; 51


	//Set Clock Source
	TCCR0  |=  TIM0_CLOCK_SOURCE;
 796:	83 b7       	in	r24, 0x33	; 51
 798:	81 60       	ori	r24, 0x01	; 1
 79a:	83 bf       	out	0x33, r24	; 51
	
	//Delay by busy wait
	for(int i=0; i< N_overflows ; i++)
 79c:	e0 e0       	ldi	r30, 0x00	; 0
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <TIM0_delay_ms+0x116>
	{
		TCNT0 = T_init;
 7a2:	a2 bf       	out	0x32, r26	; 50
		while( READ_BIT(TIFR, TIFR_TOV0) == 0 );  //Busy Wait
 7a4:	08 b6       	in	r0, 0x38	; 56
 7a6:	00 fe       	sbrs	r0, 0
 7a8:	fd cf       	rjmp	.-6      	; 0x7a4 <TIM0_delay_ms+0x108>
		SET_BIT(TIFR, TIFR_TOV0);                //Clear Overflow flag
 7aa:	88 b7       	in	r24, 0x38	; 56
 7ac:	81 60       	ori	r24, 0x01	; 1
 7ae:	88 bf       	out	0x38, r24	; 56

	//Set Clock Source
	TCCR0  |=  TIM0_CLOCK_SOURCE;
	
	//Delay by busy wait
	for(int i=0; i< N_overflows ; i++)
 7b0:	31 96       	adiw	r30, 0x01	; 1
 7b2:	2d 81       	ldd	r18, Y+5	; 0x05
 7b4:	3e 81       	ldd	r19, Y+6	; 0x06
 7b6:	49 2d       	mov	r20, r9
 7b8:	58 2d       	mov	r21, r8
 7ba:	67 2d       	mov	r22, r7
 7bc:	76 2d       	mov	r23, r6
 7be:	85 2d       	mov	r24, r5
 7c0:	94 2d       	mov	r25, r4
 7c2:	ae 2e       	mov	r10, r30
 7c4:	bf 2e       	mov	r11, r31
 7c6:	1f 2f       	mov	r17, r31
 7c8:	11 0f       	add	r17, r17
 7ca:	11 0b       	sbc	r17, r17
 7cc:	c1 2e       	mov	r12, r17
 7ce:	d1 2e       	mov	r13, r17
 7d0:	e1 2e       	mov	r14, r17
 7d2:	f1 2e       	mov	r15, r17
 7d4:	01 2f       	mov	r16, r17
 7d6:	0e 94 47 06 	call	0xc8e	; 0xc8e <__cmpdi2>
 7da:	09 f0       	breq	.+2      	; 0x7de <TIM0_delay_ms+0x142>
 7dc:	10 f7       	brcc	.-60     	; 0x7a2 <TIM0_delay_ms+0x106>
	{
		TCNT0 = T_init;
		while( READ_BIT(TIFR, TIFR_TOV0) == 0 );  //Busy Wait
		SET_BIT(TIFR, TIFR_TOV0);                //Clear Overflow flag
	}
}
 7de:	26 96       	adiw	r28, 0x06	; 6
 7e0:	0f b6       	in	r0, 0x3f	; 63
 7e2:	f8 94       	cli
 7e4:	de bf       	out	0x3e, r29	; 62
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	cd bf       	out	0x3d, r28	; 61
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	ff 90       	pop	r15
 7f4:	ef 90       	pop	r14
 7f6:	df 90       	pop	r13
 7f8:	cf 90       	pop	r12
 7fa:	bf 90       	pop	r11
 7fc:	af 90       	pop	r10
 7fe:	9f 90       	pop	r9
 800:	8f 90       	pop	r8
 802:	7f 90       	pop	r7
 804:	6f 90       	pop	r6
 806:	5f 90       	pop	r5
 808:	4f 90       	pop	r4
 80a:	08 95       	ret

0000080c <__subsf3>:
 80c:	50 58       	subi	r21, 0x80	; 128

0000080e <__addsf3>:
 80e:	bb 27       	eor	r27, r27
 810:	aa 27       	eor	r26, r26
 812:	0e 94 1e 04 	call	0x83c	; 0x83c <__addsf3x>
 816:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_round>
 81a:	0e 94 e7 05 	call	0xbce	; 0xbce <__fp_pscA>
 81e:	38 f0       	brcs	.+14     	; 0x82e <__addsf3+0x20>
 820:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_pscB>
 824:	20 f0       	brcs	.+8      	; 0x82e <__addsf3+0x20>
 826:	39 f4       	brne	.+14     	; 0x836 <__addsf3+0x28>
 828:	9f 3f       	cpi	r25, 0xFF	; 255
 82a:	19 f4       	brne	.+6      	; 0x832 <__addsf3+0x24>
 82c:	26 f4       	brtc	.+8      	; 0x836 <__addsf3+0x28>
 82e:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__fp_nan>
 832:	0e f4       	brtc	.+2      	; 0x836 <__addsf3+0x28>
 834:	e0 95       	com	r30
 836:	e7 fb       	bst	r30, 7
 838:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>

0000083c <__addsf3x>:
 83c:	e9 2f       	mov	r30, r25
 83e:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_split3>
 842:	58 f3       	brcs	.-42     	; 0x81a <__addsf3+0xc>
 844:	ba 17       	cp	r27, r26
 846:	62 07       	cpc	r22, r18
 848:	73 07       	cpc	r23, r19
 84a:	84 07       	cpc	r24, r20
 84c:	95 07       	cpc	r25, r21
 84e:	20 f0       	brcs	.+8      	; 0x858 <__addsf3x+0x1c>
 850:	79 f4       	brne	.+30     	; 0x870 <__stack+0x11>
 852:	a6 f5       	brtc	.+104    	; 0x8bc <__stack+0x5d>
 854:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_zero>
 858:	0e f4       	brtc	.+2      	; 0x85c <__addsf3x+0x20>
 85a:	e0 95       	com	r30
 85c:	0b 2e       	mov	r0, r27
 85e:	ba 2f       	mov	r27, r26
 860:	a0 2d       	mov	r26, r0
 862:	0b 01       	movw	r0, r22
 864:	b9 01       	movw	r22, r18
 866:	90 01       	movw	r18, r0
 868:	0c 01       	movw	r0, r24
 86a:	ca 01       	movw	r24, r20
 86c:	a0 01       	movw	r20, r0
 86e:	11 24       	eor	r1, r1
 870:	ff 27       	eor	r31, r31
 872:	59 1b       	sub	r21, r25
 874:	99 f0       	breq	.+38     	; 0x89c <__stack+0x3d>
 876:	59 3f       	cpi	r21, 0xF9	; 249
 878:	50 f4       	brcc	.+20     	; 0x88e <__stack+0x2f>
 87a:	50 3e       	cpi	r21, 0xE0	; 224
 87c:	68 f1       	brcs	.+90     	; 0x8d8 <__stack+0x79>
 87e:	1a 16       	cp	r1, r26
 880:	f0 40       	sbci	r31, 0x00	; 0
 882:	a2 2f       	mov	r26, r18
 884:	23 2f       	mov	r18, r19
 886:	34 2f       	mov	r19, r20
 888:	44 27       	eor	r20, r20
 88a:	58 5f       	subi	r21, 0xF8	; 248
 88c:	f3 cf       	rjmp	.-26     	; 0x874 <__stack+0x15>
 88e:	46 95       	lsr	r20
 890:	37 95       	ror	r19
 892:	27 95       	ror	r18
 894:	a7 95       	ror	r26
 896:	f0 40       	sbci	r31, 0x00	; 0
 898:	53 95       	inc	r21
 89a:	c9 f7       	brne	.-14     	; 0x88e <__stack+0x2f>
 89c:	7e f4       	brtc	.+30     	; 0x8bc <__stack+0x5d>
 89e:	1f 16       	cp	r1, r31
 8a0:	ba 0b       	sbc	r27, r26
 8a2:	62 0b       	sbc	r22, r18
 8a4:	73 0b       	sbc	r23, r19
 8a6:	84 0b       	sbc	r24, r20
 8a8:	ba f0       	brmi	.+46     	; 0x8d8 <__stack+0x79>
 8aa:	91 50       	subi	r25, 0x01	; 1
 8ac:	a1 f0       	breq	.+40     	; 0x8d6 <__stack+0x77>
 8ae:	ff 0f       	add	r31, r31
 8b0:	bb 1f       	adc	r27, r27
 8b2:	66 1f       	adc	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	c2 f7       	brpl	.-16     	; 0x8aa <__stack+0x4b>
 8ba:	0e c0       	rjmp	.+28     	; 0x8d8 <__stack+0x79>
 8bc:	ba 0f       	add	r27, r26
 8be:	62 1f       	adc	r22, r18
 8c0:	73 1f       	adc	r23, r19
 8c2:	84 1f       	adc	r24, r20
 8c4:	48 f4       	brcc	.+18     	; 0x8d8 <__stack+0x79>
 8c6:	87 95       	ror	r24
 8c8:	77 95       	ror	r23
 8ca:	67 95       	ror	r22
 8cc:	b7 95       	ror	r27
 8ce:	f7 95       	ror	r31
 8d0:	9e 3f       	cpi	r25, 0xFE	; 254
 8d2:	08 f0       	brcs	.+2      	; 0x8d6 <__stack+0x77>
 8d4:	b0 cf       	rjmp	.-160    	; 0x836 <__addsf3+0x28>
 8d6:	93 95       	inc	r25
 8d8:	88 0f       	add	r24, r24
 8da:	08 f0       	brcs	.+2      	; 0x8de <__stack+0x7f>
 8dc:	99 27       	eor	r25, r25
 8de:	ee 0f       	add	r30, r30
 8e0:	97 95       	ror	r25
 8e2:	87 95       	ror	r24
 8e4:	08 95       	ret

000008e6 <ceil>:
 8e6:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_trunc>
 8ea:	90 f0       	brcs	.+36     	; 0x910 <ceil+0x2a>
 8ec:	9f 37       	cpi	r25, 0x7F	; 127
 8ee:	48 f4       	brcc	.+18     	; 0x902 <ceil+0x1c>
 8f0:	91 11       	cpse	r25, r1
 8f2:	16 f4       	brtc	.+4      	; 0x8f8 <ceil+0x12>
 8f4:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_szero>
 8f8:	60 e0       	ldi	r22, 0x00	; 0
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	80 e8       	ldi	r24, 0x80	; 128
 8fe:	9f e3       	ldi	r25, 0x3F	; 63
 900:	08 95       	ret
 902:	26 f0       	brts	.+8      	; 0x90c <ceil+0x26>
 904:	1b 16       	cp	r1, r27
 906:	61 1d       	adc	r22, r1
 908:	71 1d       	adc	r23, r1
 90a:	81 1d       	adc	r24, r1
 90c:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_mintl>
 910:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_mpack>

00000914 <__divsf3>:
 914:	0e 94 9e 04 	call	0x93c	; 0x93c <__divsf3x>
 918:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_round>
 91c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_pscB>
 920:	58 f0       	brcs	.+22     	; 0x938 <__divsf3+0x24>
 922:	0e 94 e7 05 	call	0xbce	; 0xbce <__fp_pscA>
 926:	40 f0       	brcs	.+16     	; 0x938 <__divsf3+0x24>
 928:	29 f4       	brne	.+10     	; 0x934 <__divsf3+0x20>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	29 f0       	breq	.+10     	; 0x938 <__divsf3+0x24>
 92e:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>
 932:	51 11       	cpse	r21, r1
 934:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_szero>
 938:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__fp_nan>

0000093c <__divsf3x>:
 93c:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_split3>
 940:	68 f3       	brcs	.-38     	; 0x91c <__divsf3+0x8>

00000942 <__divsf3_pse>:
 942:	99 23       	and	r25, r25
 944:	b1 f3       	breq	.-20     	; 0x932 <__divsf3+0x1e>
 946:	55 23       	and	r21, r21
 948:	91 f3       	breq	.-28     	; 0x92e <__divsf3+0x1a>
 94a:	95 1b       	sub	r25, r21
 94c:	55 0b       	sbc	r21, r21
 94e:	bb 27       	eor	r27, r27
 950:	aa 27       	eor	r26, r26
 952:	62 17       	cp	r22, r18
 954:	73 07       	cpc	r23, r19
 956:	84 07       	cpc	r24, r20
 958:	38 f0       	brcs	.+14     	; 0x968 <__divsf3_pse+0x26>
 95a:	9f 5f       	subi	r25, 0xFF	; 255
 95c:	5f 4f       	sbci	r21, 0xFF	; 255
 95e:	22 0f       	add	r18, r18
 960:	33 1f       	adc	r19, r19
 962:	44 1f       	adc	r20, r20
 964:	aa 1f       	adc	r26, r26
 966:	a9 f3       	breq	.-22     	; 0x952 <__divsf3_pse+0x10>
 968:	35 d0       	rcall	.+106    	; 0x9d4 <__divsf3_pse+0x92>
 96a:	0e 2e       	mov	r0, r30
 96c:	3a f0       	brmi	.+14     	; 0x97c <__divsf3_pse+0x3a>
 96e:	e0 e8       	ldi	r30, 0x80	; 128
 970:	32 d0       	rcall	.+100    	; 0x9d6 <__divsf3_pse+0x94>
 972:	91 50       	subi	r25, 0x01	; 1
 974:	50 40       	sbci	r21, 0x00	; 0
 976:	e6 95       	lsr	r30
 978:	00 1c       	adc	r0, r0
 97a:	ca f7       	brpl	.-14     	; 0x96e <__divsf3_pse+0x2c>
 97c:	2b d0       	rcall	.+86     	; 0x9d4 <__divsf3_pse+0x92>
 97e:	fe 2f       	mov	r31, r30
 980:	29 d0       	rcall	.+82     	; 0x9d4 <__divsf3_pse+0x92>
 982:	66 0f       	add	r22, r22
 984:	77 1f       	adc	r23, r23
 986:	88 1f       	adc	r24, r24
 988:	bb 1f       	adc	r27, r27
 98a:	26 17       	cp	r18, r22
 98c:	37 07       	cpc	r19, r23
 98e:	48 07       	cpc	r20, r24
 990:	ab 07       	cpc	r26, r27
 992:	b0 e8       	ldi	r27, 0x80	; 128
 994:	09 f0       	breq	.+2      	; 0x998 <__divsf3_pse+0x56>
 996:	bb 0b       	sbc	r27, r27
 998:	80 2d       	mov	r24, r0
 99a:	bf 01       	movw	r22, r30
 99c:	ff 27       	eor	r31, r31
 99e:	93 58       	subi	r25, 0x83	; 131
 9a0:	5f 4f       	sbci	r21, 0xFF	; 255
 9a2:	3a f0       	brmi	.+14     	; 0x9b2 <__divsf3_pse+0x70>
 9a4:	9e 3f       	cpi	r25, 0xFE	; 254
 9a6:	51 05       	cpc	r21, r1
 9a8:	78 f0       	brcs	.+30     	; 0x9c8 <__divsf3_pse+0x86>
 9aa:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>
 9ae:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_szero>
 9b2:	5f 3f       	cpi	r21, 0xFF	; 255
 9b4:	e4 f3       	brlt	.-8      	; 0x9ae <__divsf3_pse+0x6c>
 9b6:	98 3e       	cpi	r25, 0xE8	; 232
 9b8:	d4 f3       	brlt	.-12     	; 0x9ae <__divsf3_pse+0x6c>
 9ba:	86 95       	lsr	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b7 95       	ror	r27
 9c2:	f7 95       	ror	r31
 9c4:	9f 5f       	subi	r25, 0xFF	; 255
 9c6:	c9 f7       	brne	.-14     	; 0x9ba <__divsf3_pse+0x78>
 9c8:	88 0f       	add	r24, r24
 9ca:	91 1d       	adc	r25, r1
 9cc:	96 95       	lsr	r25
 9ce:	87 95       	ror	r24
 9d0:	97 f9       	bld	r25, 7
 9d2:	08 95       	ret
 9d4:	e1 e0       	ldi	r30, 0x01	; 1
 9d6:	66 0f       	add	r22, r22
 9d8:	77 1f       	adc	r23, r23
 9da:	88 1f       	adc	r24, r24
 9dc:	bb 1f       	adc	r27, r27
 9de:	62 17       	cp	r22, r18
 9e0:	73 07       	cpc	r23, r19
 9e2:	84 07       	cpc	r24, r20
 9e4:	ba 07       	cpc	r27, r26
 9e6:	20 f0       	brcs	.+8      	; 0x9f0 <__divsf3_pse+0xae>
 9e8:	62 1b       	sub	r22, r18
 9ea:	73 0b       	sbc	r23, r19
 9ec:	84 0b       	sbc	r24, r20
 9ee:	ba 0b       	sbc	r27, r26
 9f0:	ee 1f       	adc	r30, r30
 9f2:	88 f7       	brcc	.-30     	; 0x9d6 <__divsf3_pse+0x94>
 9f4:	e0 95       	com	r30
 9f6:	08 95       	ret

000009f8 <__fixsfdi>:
 9f8:	be e3       	ldi	r27, 0x3E	; 62
 9fa:	04 d0       	rcall	.+8      	; 0xa04 <__fixunssfdi+0x2>
 9fc:	08 f4       	brcc	.+2      	; 0xa00 <__fixsfdi+0x8>
 9fe:	90 e8       	ldi	r25, 0x80	; 128
 a00:	08 95       	ret

00000a02 <__fixunssfdi>:
 a02:	bf e3       	ldi	r27, 0x3F	; 63
 a04:	22 27       	eor	r18, r18
 a06:	33 27       	eor	r19, r19
 a08:	a9 01       	movw	r20, r18
 a0a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_splitA>
 a0e:	60 f1       	brcs	.+88     	; 0xa68 <__fixunssfdi+0x66>
 a10:	9f 57       	subi	r25, 0x7F	; 127
 a12:	48 f1       	brcs	.+82     	; 0xa66 <__fixunssfdi+0x64>
 a14:	b9 17       	cp	r27, r25
 a16:	40 f1       	brcs	.+80     	; 0xa68 <__fixunssfdi+0x66>
 a18:	bf e3       	ldi	r27, 0x3F	; 63
 a1a:	b9 1b       	sub	r27, r25
 a1c:	99 27       	eor	r25, r25
 a1e:	b8 50       	subi	r27, 0x08	; 8
 a20:	3a f4       	brpl	.+14     	; 0xa30 <__fixunssfdi+0x2e>
 a22:	66 0f       	add	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	88 1f       	adc	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	b3 95       	inc	r27
 a2c:	d2 f3       	brmi	.-12     	; 0xa22 <__fixunssfdi+0x20>
 a2e:	16 c0       	rjmp	.+44     	; 0xa5c <__fixunssfdi+0x5a>
 a30:	b8 50       	subi	r27, 0x08	; 8
 a32:	4a f0       	brmi	.+18     	; 0xa46 <__fixunssfdi+0x44>
 a34:	23 2f       	mov	r18, r19
 a36:	34 2f       	mov	r19, r20
 a38:	45 2f       	mov	r20, r21
 a3a:	56 2f       	mov	r21, r22
 a3c:	67 2f       	mov	r22, r23
 a3e:	78 2f       	mov	r23, r24
 a40:	88 27       	eor	r24, r24
 a42:	b8 50       	subi	r27, 0x08	; 8
 a44:	ba f7       	brpl	.-18     	; 0xa34 <__fixunssfdi+0x32>
 a46:	b8 5f       	subi	r27, 0xF8	; 248
 a48:	49 f0       	breq	.+18     	; 0xa5c <__fixunssfdi+0x5a>
 a4a:	86 95       	lsr	r24
 a4c:	77 95       	ror	r23
 a4e:	67 95       	ror	r22
 a50:	57 95       	ror	r21
 a52:	47 95       	ror	r20
 a54:	37 95       	ror	r19
 a56:	27 95       	ror	r18
 a58:	ba 95       	dec	r27
 a5a:	b9 f7       	brne	.-18     	; 0xa4a <__fixunssfdi+0x48>
 a5c:	16 f4       	brtc	.+4      	; 0xa62 <__fixunssfdi+0x60>
 a5e:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_negdi>
 a62:	88 94       	clc
 a64:	08 95       	ret
 a66:	88 94       	clc
 a68:	60 e0       	ldi	r22, 0x00	; 0
 a6a:	70 e0       	ldi	r23, 0x00	; 0
 a6c:	cb 01       	movw	r24, r22
 a6e:	08 95       	ret

00000a70 <__fixunssfsi>:
 a70:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_splitA>
 a74:	88 f0       	brcs	.+34     	; 0xa98 <__fixunssfsi+0x28>
 a76:	9f 57       	subi	r25, 0x7F	; 127
 a78:	98 f0       	brcs	.+38     	; 0xaa0 <__fixunssfsi+0x30>
 a7a:	b9 2f       	mov	r27, r25
 a7c:	99 27       	eor	r25, r25
 a7e:	b7 51       	subi	r27, 0x17	; 23
 a80:	b0 f0       	brcs	.+44     	; 0xaae <__fixunssfsi+0x3e>
 a82:	e1 f0       	breq	.+56     	; 0xabc <__fixunssfsi+0x4c>
 a84:	66 0f       	add	r22, r22
 a86:	77 1f       	adc	r23, r23
 a88:	88 1f       	adc	r24, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	1a f0       	brmi	.+6      	; 0xa94 <__fixunssfsi+0x24>
 a8e:	ba 95       	dec	r27
 a90:	c9 f7       	brne	.-14     	; 0xa84 <__fixunssfsi+0x14>
 a92:	14 c0       	rjmp	.+40     	; 0xabc <__fixunssfsi+0x4c>
 a94:	b1 30       	cpi	r27, 0x01	; 1
 a96:	91 f0       	breq	.+36     	; 0xabc <__fixunssfsi+0x4c>
 a98:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_zero>
 a9c:	b1 e0       	ldi	r27, 0x01	; 1
 a9e:	08 95       	ret
 aa0:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_zero>
 aa4:	67 2f       	mov	r22, r23
 aa6:	78 2f       	mov	r23, r24
 aa8:	88 27       	eor	r24, r24
 aaa:	b8 5f       	subi	r27, 0xF8	; 248
 aac:	39 f0       	breq	.+14     	; 0xabc <__fixunssfsi+0x4c>
 aae:	b9 3f       	cpi	r27, 0xF9	; 249
 ab0:	cc f3       	brlt	.-14     	; 0xaa4 <__fixunssfsi+0x34>
 ab2:	86 95       	lsr	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b3 95       	inc	r27
 aba:	d9 f7       	brne	.-10     	; 0xab2 <__fixunssfsi+0x42>
 abc:	3e f4       	brtc	.+14     	; 0xacc <__fixunssfsi+0x5c>
 abe:	90 95       	com	r25
 ac0:	80 95       	com	r24
 ac2:	70 95       	com	r23
 ac4:	61 95       	neg	r22
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	08 95       	ret

00000ace <__floatundisf>:
 ace:	e8 94       	clt

00000ad0 <__fp_di2sf>:
 ad0:	f9 2f       	mov	r31, r25
 ad2:	96 eb       	ldi	r25, 0xB6	; 182
 ad4:	ff 23       	and	r31, r31
 ad6:	81 f0       	breq	.+32     	; 0xaf8 <__fp_di2sf+0x28>
 ad8:	12 16       	cp	r1, r18
 ada:	13 06       	cpc	r1, r19
 adc:	14 06       	cpc	r1, r20
 ade:	44 0b       	sbc	r20, r20
 ae0:	93 95       	inc	r25
 ae2:	f6 95       	lsr	r31
 ae4:	87 95       	ror	r24
 ae6:	77 95       	ror	r23
 ae8:	67 95       	ror	r22
 aea:	57 95       	ror	r21
 aec:	40 40       	sbci	r20, 0x00	; 0
 aee:	ff 23       	and	r31, r31
 af0:	b9 f7       	brne	.-18     	; 0xae0 <__fp_di2sf+0x10>
 af2:	1b c0       	rjmp	.+54     	; 0xb2a <__fp_di2sf+0x5a>
 af4:	99 27       	eor	r25, r25
 af6:	08 95       	ret
 af8:	88 23       	and	r24, r24
 afa:	51 f4       	brne	.+20     	; 0xb10 <__fp_di2sf+0x40>
 afc:	98 50       	subi	r25, 0x08	; 8
 afe:	d2 f7       	brpl	.-12     	; 0xaf4 <__fp_di2sf+0x24>
 b00:	87 2b       	or	r24, r23
 b02:	76 2f       	mov	r23, r22
 b04:	65 2f       	mov	r22, r21
 b06:	54 2f       	mov	r21, r20
 b08:	43 2f       	mov	r20, r19
 b0a:	32 2f       	mov	r19, r18
 b0c:	20 e0       	ldi	r18, 0x00	; 0
 b0e:	b1 f3       	breq	.-20     	; 0xafc <__fp_di2sf+0x2c>
 b10:	12 16       	cp	r1, r18
 b12:	13 06       	cpc	r1, r19
 b14:	14 06       	cpc	r1, r20
 b16:	44 0b       	sbc	r20, r20
 b18:	88 23       	and	r24, r24
 b1a:	3a f0       	brmi	.+14     	; 0xb2a <__fp_di2sf+0x5a>
 b1c:	9a 95       	dec	r25
 b1e:	44 0f       	add	r20, r20
 b20:	55 1f       	adc	r21, r21
 b22:	66 1f       	adc	r22, r22
 b24:	77 1f       	adc	r23, r23
 b26:	88 1f       	adc	r24, r24
 b28:	ca f7       	brpl	.-14     	; 0xb1c <__fp_di2sf+0x4c>
 b2a:	55 23       	and	r21, r21
 b2c:	4a f4       	brpl	.+18     	; 0xb40 <__fp_di2sf+0x70>
 b2e:	44 0f       	add	r20, r20
 b30:	55 1f       	adc	r21, r21
 b32:	11 f4       	brne	.+4      	; 0xb38 <__fp_di2sf+0x68>
 b34:	60 ff       	sbrs	r22, 0
 b36:	04 c0       	rjmp	.+8      	; 0xb40 <__fp_di2sf+0x70>
 b38:	6f 5f       	subi	r22, 0xFF	; 255
 b3a:	7f 4f       	sbci	r23, 0xFF	; 255
 b3c:	8f 4f       	sbci	r24, 0xFF	; 255
 b3e:	9f 4f       	sbci	r25, 0xFF	; 255
 b40:	88 0f       	add	r24, r24
 b42:	96 95       	lsr	r25
 b44:	87 95       	ror	r24
 b46:	97 f9       	bld	r25, 7
 b48:	08 95       	ret

00000b4a <__fp_inf>:
 b4a:	97 f9       	bld	r25, 7
 b4c:	9f 67       	ori	r25, 0x7F	; 127
 b4e:	80 e8       	ldi	r24, 0x80	; 128
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	60 e0       	ldi	r22, 0x00	; 0
 b54:	08 95       	ret

00000b56 <__fp_mintl>:
 b56:	88 23       	and	r24, r24
 b58:	71 f4       	brne	.+28     	; 0xb76 <__fp_mintl+0x20>
 b5a:	77 23       	and	r23, r23
 b5c:	21 f0       	breq	.+8      	; 0xb66 <__fp_mintl+0x10>
 b5e:	98 50       	subi	r25, 0x08	; 8
 b60:	87 2b       	or	r24, r23
 b62:	76 2f       	mov	r23, r22
 b64:	07 c0       	rjmp	.+14     	; 0xb74 <__fp_mintl+0x1e>
 b66:	66 23       	and	r22, r22
 b68:	11 f4       	brne	.+4      	; 0xb6e <__fp_mintl+0x18>
 b6a:	99 27       	eor	r25, r25
 b6c:	0d c0       	rjmp	.+26     	; 0xb88 <__fp_mintl+0x32>
 b6e:	90 51       	subi	r25, 0x10	; 16
 b70:	86 2b       	or	r24, r22
 b72:	70 e0       	ldi	r23, 0x00	; 0
 b74:	60 e0       	ldi	r22, 0x00	; 0
 b76:	2a f0       	brmi	.+10     	; 0xb82 <__fp_mintl+0x2c>
 b78:	9a 95       	dec	r25
 b7a:	66 0f       	add	r22, r22
 b7c:	77 1f       	adc	r23, r23
 b7e:	88 1f       	adc	r24, r24
 b80:	da f7       	brpl	.-10     	; 0xb78 <__fp_mintl+0x22>
 b82:	88 0f       	add	r24, r24
 b84:	96 95       	lsr	r25
 b86:	87 95       	ror	r24
 b88:	97 f9       	bld	r25, 7
 b8a:	08 95       	ret

00000b8c <__fp_mpack>:
 b8c:	9f 3f       	cpi	r25, 0xFF	; 255
 b8e:	31 f0       	breq	.+12     	; 0xb9c <__fp_mpack_finite+0xc>

00000b90 <__fp_mpack_finite>:
 b90:	91 50       	subi	r25, 0x01	; 1
 b92:	20 f4       	brcc	.+8      	; 0xb9c <__fp_mpack_finite+0xc>
 b94:	87 95       	ror	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	b7 95       	ror	r27
 b9c:	88 0f       	add	r24, r24
 b9e:	91 1d       	adc	r25, r1
 ba0:	96 95       	lsr	r25
 ba2:	87 95       	ror	r24
 ba4:	97 f9       	bld	r25, 7
 ba6:	08 95       	ret

00000ba8 <__fp_nan>:
 ba8:	9f ef       	ldi	r25, 0xFF	; 255
 baa:	80 ec       	ldi	r24, 0xC0	; 192
 bac:	08 95       	ret

00000bae <__fp_negdi>:
 bae:	90 95       	com	r25
 bb0:	80 95       	com	r24
 bb2:	70 95       	com	r23
 bb4:	60 95       	com	r22
 bb6:	50 95       	com	r21
 bb8:	40 95       	com	r20
 bba:	30 95       	com	r19
 bbc:	21 95       	neg	r18
 bbe:	3f 4f       	sbci	r19, 0xFF	; 255
 bc0:	4f 4f       	sbci	r20, 0xFF	; 255
 bc2:	5f 4f       	sbci	r21, 0xFF	; 255
 bc4:	6f 4f       	sbci	r22, 0xFF	; 255
 bc6:	7f 4f       	sbci	r23, 0xFF	; 255
 bc8:	8f 4f       	sbci	r24, 0xFF	; 255
 bca:	9f 4f       	sbci	r25, 0xFF	; 255
 bcc:	08 95       	ret

00000bce <__fp_pscA>:
 bce:	00 24       	eor	r0, r0
 bd0:	0a 94       	dec	r0
 bd2:	16 16       	cp	r1, r22
 bd4:	17 06       	cpc	r1, r23
 bd6:	18 06       	cpc	r1, r24
 bd8:	09 06       	cpc	r0, r25
 bda:	08 95       	ret

00000bdc <__fp_pscB>:
 bdc:	00 24       	eor	r0, r0
 bde:	0a 94       	dec	r0
 be0:	12 16       	cp	r1, r18
 be2:	13 06       	cpc	r1, r19
 be4:	14 06       	cpc	r1, r20
 be6:	05 06       	cpc	r0, r21
 be8:	08 95       	ret

00000bea <__fp_round>:
 bea:	09 2e       	mov	r0, r25
 bec:	03 94       	inc	r0
 bee:	00 0c       	add	r0, r0
 bf0:	11 f4       	brne	.+4      	; 0xbf6 <__fp_round+0xc>
 bf2:	88 23       	and	r24, r24
 bf4:	52 f0       	brmi	.+20     	; 0xc0a <__fp_round+0x20>
 bf6:	bb 0f       	add	r27, r27
 bf8:	40 f4       	brcc	.+16     	; 0xc0a <__fp_round+0x20>
 bfa:	bf 2b       	or	r27, r31
 bfc:	11 f4       	brne	.+4      	; 0xc02 <__fp_round+0x18>
 bfe:	60 ff       	sbrs	r22, 0
 c00:	04 c0       	rjmp	.+8      	; 0xc0a <__fp_round+0x20>
 c02:	6f 5f       	subi	r22, 0xFF	; 255
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	8f 4f       	sbci	r24, 0xFF	; 255
 c08:	9f 4f       	sbci	r25, 0xFF	; 255
 c0a:	08 95       	ret

00000c0c <__fp_split3>:
 c0c:	57 fd       	sbrc	r21, 7
 c0e:	90 58       	subi	r25, 0x80	; 128
 c10:	44 0f       	add	r20, r20
 c12:	55 1f       	adc	r21, r21
 c14:	59 f0       	breq	.+22     	; 0xc2c <__fp_splitA+0x10>
 c16:	5f 3f       	cpi	r21, 0xFF	; 255
 c18:	71 f0       	breq	.+28     	; 0xc36 <__fp_splitA+0x1a>
 c1a:	47 95       	ror	r20

00000c1c <__fp_splitA>:
 c1c:	88 0f       	add	r24, r24
 c1e:	97 fb       	bst	r25, 7
 c20:	99 1f       	adc	r25, r25
 c22:	61 f0       	breq	.+24     	; 0xc3c <__fp_splitA+0x20>
 c24:	9f 3f       	cpi	r25, 0xFF	; 255
 c26:	79 f0       	breq	.+30     	; 0xc46 <__fp_splitA+0x2a>
 c28:	87 95       	ror	r24
 c2a:	08 95       	ret
 c2c:	12 16       	cp	r1, r18
 c2e:	13 06       	cpc	r1, r19
 c30:	14 06       	cpc	r1, r20
 c32:	55 1f       	adc	r21, r21
 c34:	f2 cf       	rjmp	.-28     	; 0xc1a <__fp_split3+0xe>
 c36:	46 95       	lsr	r20
 c38:	f1 df       	rcall	.-30     	; 0xc1c <__fp_splitA>
 c3a:	08 c0       	rjmp	.+16     	; 0xc4c <__fp_splitA+0x30>
 c3c:	16 16       	cp	r1, r22
 c3e:	17 06       	cpc	r1, r23
 c40:	18 06       	cpc	r1, r24
 c42:	99 1f       	adc	r25, r25
 c44:	f1 cf       	rjmp	.-30     	; 0xc28 <__fp_splitA+0xc>
 c46:	86 95       	lsr	r24
 c48:	71 05       	cpc	r23, r1
 c4a:	61 05       	cpc	r22, r1
 c4c:	08 94       	sec
 c4e:	08 95       	ret

00000c50 <__fp_trunc>:
 c50:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_splitA>
 c54:	a0 f0       	brcs	.+40     	; 0xc7e <__fp_trunc+0x2e>
 c56:	be e7       	ldi	r27, 0x7E	; 126
 c58:	b9 17       	cp	r27, r25
 c5a:	88 f4       	brcc	.+34     	; 0xc7e <__fp_trunc+0x2e>
 c5c:	bb 27       	eor	r27, r27
 c5e:	9f 38       	cpi	r25, 0x8F	; 143
 c60:	60 f4       	brcc	.+24     	; 0xc7a <__fp_trunc+0x2a>
 c62:	16 16       	cp	r1, r22
 c64:	b1 1d       	adc	r27, r1
 c66:	67 2f       	mov	r22, r23
 c68:	78 2f       	mov	r23, r24
 c6a:	88 27       	eor	r24, r24
 c6c:	98 5f       	subi	r25, 0xF8	; 248
 c6e:	f7 cf       	rjmp	.-18     	; 0xc5e <__fp_trunc+0xe>
 c70:	86 95       	lsr	r24
 c72:	77 95       	ror	r23
 c74:	67 95       	ror	r22
 c76:	b1 1d       	adc	r27, r1
 c78:	93 95       	inc	r25
 c7a:	96 39       	cpi	r25, 0x96	; 150
 c7c:	c8 f3       	brcs	.-14     	; 0xc70 <__fp_trunc+0x20>
 c7e:	08 95       	ret

00000c80 <__fp_zero>:
 c80:	e8 94       	clt

00000c82 <__fp_szero>:
 c82:	bb 27       	eor	r27, r27
 c84:	66 27       	eor	r22, r22
 c86:	77 27       	eor	r23, r23
 c88:	cb 01       	movw	r24, r22
 c8a:	97 f9       	bld	r25, 7
 c8c:	08 95       	ret

00000c8e <__cmpdi2>:
 c8e:	2a 15       	cp	r18, r10
 c90:	3b 05       	cpc	r19, r11
 c92:	4c 05       	cpc	r20, r12
 c94:	5d 05       	cpc	r21, r13
 c96:	6e 05       	cpc	r22, r14
 c98:	7f 05       	cpc	r23, r15
 c9a:	80 07       	cpc	r24, r16
 c9c:	91 07       	cpc	r25, r17
 c9e:	08 95       	ret

00000ca0 <__cmpdi2_s8>:
 ca0:	00 24       	eor	r0, r0
 ca2:	a7 fd       	sbrc	r26, 7
 ca4:	00 94       	com	r0
 ca6:	2a 17       	cp	r18, r26
 ca8:	30 05       	cpc	r19, r0
 caa:	40 05       	cpc	r20, r0
 cac:	50 05       	cpc	r21, r0
 cae:	60 05       	cpc	r22, r0
 cb0:	70 05       	cpc	r23, r0
 cb2:	80 05       	cpc	r24, r0
 cb4:	90 05       	cpc	r25, r0
 cb6:	08 95       	ret

00000cb8 <_exit>:
 cb8:	f8 94       	cli

00000cba <__stop_program>:
 cba:	ff cf       	rjmp	.-2      	; 0xcba <__stop_program>
